---
engine: knitr
---

# Static communication {#sec-static-communication}

**Required material**

- Read *R for Data Science*, Chapter 28 'Graphics for communication', [@r4ds]
- Read *Data Visualization: A Practical Introduction*, Chapter 3 'Make a plot', [@healyviz]
- Read *Testing Statistical Charts: What Makes a Good Graph?*, [@vanderplas2020testing]
- Read *Data Feminism*, Chapter 3 'On Rational, Scientific, Objective Viewpoints from Mythical, Imaginary, Impossible Standpoints', [@datafeminism2020]
- Read *Historical development of the graphical representation of statistical data*, Chapter 2, 'The Origin of the Graphic Method', [@funkhouser1937historical]

**Key concepts and skills**

- Appreciate the importance of showing the reader the actual observations in the dataset, or as close as is possible, through graphs and tables.
- Develop comfort with a variety of graph options, including bar charts, scatterplots, line plots, and histograms.
- Know how to use tables to show part of a dataset, communicate summary statistics, and display regression results.
- Consider maps as a type of a graph and know how to geocode.

**Key packages and functions**

- Base R [@citeR]
  - `lm()`
- `datasauRus` [@citedatasauRus]
- `ggmap` [@KahleWickham2013]
	- `get_googlemap()`
	- `get_stamenmap()`
	- `ggmap()`
- Core `tidyverse` [@citetidyverse]
	- `ggplot2` [@citeggplot]
		- `coord_map()`
		- `facet_wrap()`
		- `geom_abline()`
		- `geom_bar()`
		- `geom_boxplot()`
		- `geom_dotplot()`
		- `geom_freqpoly()`
		- `geom_histogram()`
		- `geom_jitter()`
		- `geom_line()`
		- `geom_path()`
		- `geom_point()`
		- `geom_polygon()`
		- `geom_smooth()`
		- `geom_step()`
		- `ggplot()`
		- `ggsave()`
		- `labeller()`
		- `labs()`
		- `map_data()`
		- `scale_color_brewer()`
		- `scale_colour_viridis_d()`
		- `scale_fill_brewer()`
		- `scale_fill_viridis()`
		- `stat_qq()`
		- `stat_qq_line()`
		- `theme()`
		- `theme_bw()`
		- `theme_classic()`
		- `theme_linedraw()`
		- `theme_minimal()`
- `kableExtra` [@citekableextra]
	- `add_header_above()`
- `knitr` [@citeknitr]
	- `kable()`
- `maps`
	- `map()`
- `modelsummary` [@citemodelsummary]
	- `datasummary()`
	- `datasummary_balance()`
	- `datasummary_correlation()`
	- `datasummary_skim()`
	- `modelsummary()`
- `opendatatoronto` [@citeSharla]
- `patchwork` [@citepatchwork]
- `viridis` [@viridis]
- `WDI` [@WDI]
	- `WDI()`
	- `WDIsearch()`
	- `WDI` [@WDI]



## Introduction

When telling stories with data, we would like the data to do much of the work of convincing our reader. The paper is the medium, and the data are the message. To that end, we want to try to show our reader the data that allowed us to come to our understanding of the story. We use graphs, tables, and maps to help achieve this. 

The critical task is to show the actual observations that underpin our analysis, or as close to them as we can. For instance, if our dataset consists of 2,500 responses to a survey, then at some point in the paper we would expect a graph that contains, or represents, all 2,500 observations, for every variable of interest. To do this we build graphs using `ggplot2` [@citeggplot] which is part of the `tidyverse` [@citetidyverse]. We will go through a variety of different options here including bar charts, scatterplots, line plots, and histograms.

In contrast to the role of graphs, which is to show the actual observations, or as close to them as possible, the role of tables is typically to show an extract of the dataset, convey various summary statistics, or regression results. We will build tables using `knitr` [@citeknitr] and `kableExtra` [@citekableextra] initially, and then `modelsummary` [@citemodelsummary]. 

Finally, we cover maps as a variant of graphs that are used to show a particular type of data. We will build static maps using `ggmap` [@KahleWickham2013], having obtained the geocoded data that we need using `tidygeocoder` [@citetidygeocoder].


## Graphs

> Data visualization is a communciation skill
> 
> John Burn-Murdoch

Graphs are a critical aspect of compelling stories told with data. They allow us to see both broad patterns and detail [@elementsofgraphingdata, p. 5]. Graphs provide us with a familiarity with our data that no other method allows. Every variable of interest should be graphed.

In a way, the graphing of data is an information coding process where we use purposeful marks to convey information to our audience. The audience must decode these marks. The success of our graph turns on how much information is lost in this process. It is the decoding that is the critical aspect [@elementsofgraphingdata, p. 221], which means that we must focus on creating graphs for the audience. If nothing else is possible, the most important objective is to convey as much of the actual data, and its context, as possible. Data do not exist in a vacuum and it is important that we recognize the 'social, cultural, and political contexts' in which they exist [@Klein2022What].

To see why this is important we begin by using a dataset from `datasauRus` [@citedatasauRus]. After installing and loading the necessary packages, we can take a quick look at the dataset.

```{r}
#| eval: false
#| echo: true

install.packages('datasauRus')
```

```{r}
#| message: false

library(tidyverse)
library(datasauRus)

head(datasaurus_dozen)
datasaurus_dozen |> 
  count(dataset)
```

The dataset consists of values for 'x' and 'y', which should be plotted on the x-axis and y-axis, respectively. We can further see that there are thirteen different values in the variable 'dataset' including: "dino", "star", "away", and "bullseye". We will focus on those four and generate summary statistics for each (@tbl-datasaurussummarystats).

```{r}
#| label: tbl-datasaurussummarystats
#| tbl-cap: "Mean and standard deviation for four 'datasaurus' datasets"
#| message: false

# From Julia Silge: 
# https://juliasilge.com/blog/datasaurus-multiclass/
datasaurus_dozen |>
  filter(dataset %in% c("dino", "star", "away", "bullseye")) |>
  group_by(dataset) |>
  summarise(across(c(x, y),
                   list(mean = mean,
                        sd = sd)),
            x_y_cor = cor(x, y)) |>
  knitr::kable(
    col.names = c("Dataset", 
                  "x mean", 
                  "x sd", 
                  "y mean", 
                  "y sd", 
                  "correlation"),
    digits = 1,
    booktabs = TRUE,
    linesep = ""
  )
```

Despite the similarities of the summary statistics, it turns out the different 'datasets' are actually very different beasts. This becomes clear when we graph the actual data (@fig-datasaurusgraph).

```{r}
#| eval: true
#| fig-cap: "Graph of four 'datasaurus' datasets"
#| label: fig-datasaurusgraph
#| warning: false
#| echo: true

datasaurus_dozen |> 
  filter(dataset %in% c("dino", "star", "away", "bullseye")) |>
  ggplot(aes(x = x, y = y, colour = dataset)) +
  geom_point() +
  theme_minimal() +
  facet_wrap(vars(dataset), nrow = 2, ncol = 2) +
  labs(colour = "Dataset")
```

This is a variant of the famous 'Anscombe's Quartet' which comes with R. The key takeaway is that it is important to plot the actual data and not rely on summary statistics.

```{r}
head(anscombe)
```

Anscombe's Quartet consists of six observations for four different datasets, again with x and y values for each observation. We need to manipulate this dataset with `pivot_longer()` to get it into the 'tidy' format discussed in [Chapter -@sec-r-essentials]. 

```{r}
# From Nick Tierney: 
# https://www.njtierney.com/post/2020/06/01/tidy-anscombe/
# Code from pivot_longer() vignette.

tidy_anscombe <- 
  anscombe |>
  pivot_longer(everything(),
               names_to = c(".value", "set"),
               names_pattern = "(.)(.)"
               )
```

We can again first create summary statistics (@tbl-anscombesummarystats) and then graph the data (@fig-anscombegraph). And we again see the importance of graphing the actual data, rather than relying on summary statistics.

```{r}
#| label: tbl-anscombesummarystats
#| message: false
#| tbl-cap: "Mean and standard deviation for Anscombe"

tidy_anscombe |>
  group_by(set) |>
  summarise(across(c(x, y),
                   list(mean = mean, sd = sd)),
            x_y_cor = cor(x, y)) |>
  knitr::kable(
    col.names = c("Dataset", 
                  "x mean", 
                  "x sd", 
                  "y mean", 
                  "y sd", 
                  "correlation"),
    digits = 1,
    booktabs = TRUE,
    linesep = ""
  )
```


```{r}
#| eval: true
#| fig-cap: "Recreation of Anscombe's Quartet"
#| label: fig-anscombegraph
#| warning: false
#| echo: true

tidy_anscombe |> 
  ggplot(aes(x = x, y = y, colour = set)) +
  geom_point() +
  theme_minimal() +
  facet_wrap(vars(set), nrow = 2, ncol = 2) +
  labs(colour = "Dataset")
```


Graphs can be ugly, bad, and wrong [@wilke2019fundamentals]. It is initially enough to try to avoid that. But often one quickly wants to go beyond that. There are many different `ggplot2` options and a helpful reference sheet is provided by [Isabella Benabaue](https://isabella-b.com/blog/ggplot2-theme-elements-reference/). And [Yan Holtz](https://www.dataviz-inspiration.com) provides examples of beautiful and impactful data visualization. As mentioned in [Chapter -@sec-r-essentials] `ggplot2` implements a grammar of graphics, which describes a plot as comprising data with aesthetic attributes such as layer, scales, coordinates, facets, and themes [@citeggplot].

### Bar charts

We typically use a bar chart when we have a categorical variable that we want to focus on. We saw an example of this in [Chapter -@sec-fire-hose] where we constructed a graph of the number of occupied beds. The geom that we primarily use is `geom_bar()`, but there are many variants to cater for specific situations. 

We will use a dataset from the 1997-2001 British Election Panel Study that was put together by @fox2006effect.

```{r}
#| include: true
#| eval: false

# Vincent Arel Bundock provides access to this dataset.
beps <- 
  read_csv(
    file = 
    "https://vincentarelbundock.github.io/Rdatasets/csv/carData/BEPS.csv"
    )
```

```{r}
#| include: false
#| eval: false

# INTERNAL
write_csv(beps,
          "inputs/data/beps.csv")
```

```{r}
#| include: false
#| eval: true

# INTERNAL
beps <- 
  read_csv(
    file = "inputs/data/beps.csv"
    )
```

```{r}
#| include: true
#| eval: true

head(beps)
```

The dataset consists of which party the respondent supports, along with various demographic, economic, and political variables. In particular, we have the age of the respondents. We begin by creating age-groups from the ages, and making a bar chart of the age-groups using `geom_bar()` (@fig-bepfitst).

```{r}
#| label: fig-bepfitst
#| eval: true
#| fig-cap: "Distribution of ages in the 1997-2001 British Election Panel Study"
#| warning: false
#| echo: true

beps <- 
  beps |> 
  mutate(age_group = 
           case_when(age < 35 ~ "<35",
                     age < 50 ~ "35-49",
                     age < 65 ~ "50-64",
                     age < 80 ~ "65-79",
                     age < 100 ~ "80-99"
                     ),
         age_group = factor(age_group,
                            levels = c("<35",
                                       "35-49",
                                       "50-64",
                                       "65-79",
                                       "80-99"
                                       )
                            )
         )

beps |>  
  ggplot(mapping = aes(x = age_group)) +
  geom_bar()
```

By default, `geom_bar()` creates a count of the number of times each age-group appears in the dataset. It does this because the default 'stat' for `geom_bar()` is 'count'. This saves us from having to create that statistic ourselves. But if we had already constructed a count (for instance, `beps |> count(age)`), then we could also specify a column of values for the y-axis and use `stat = "identity"`.

We may also like to consider different groupings of the data, for instance, looking at which party the respondent supports, by age-group (@fig-bepsecond).

```{r}
#| echo: true
#| eval: true
#| fig-cap: "Distribution of age-group, and vote preference, in the 1997-2001 British Election Panel Study"
#| label: fig-bepsecond
#| warning: false

beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar()
```

The default is that these different groups are stacked, but they can be placed side-by-side with `position = "dodge"` (@fig-bepthird).

```{r}
#| echo: true
#| eval: true
#| fig-cap: "Distribution of age-groups, and vote preference, in the 1997-2001 British Election Panel Study"
#| label: fig-bepthird
#| warning: false

beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar(position = "dodge")
```

At this point, we may like to address the general look of the graph. There are various themes that are built into `ggplot2`. Some of these include `theme_bw()`, `theme_classic()`, `theme_dark()`, and `theme_minimal()`. A full list is available at the `ggplot2` [cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf). We can use these themes by adding them as a layer (@fig-bepthemes). Here we can use `patchwork` [@citepatchwork] to bring together multiple graphs. To do this we assign the graph to a name, and then use '+' to signal which should be next to each other, '/' to signal which would be on top, and brackets for precedence.

```{r}
#| echo: true
#| eval: true
#| fig-cap: "Distribution of age-groups, and vote preference, in the 1997-2001 British Election Panel Study, illustrating different themes"
#| label: fig-bepthemes
#| warning: false

library(patchwork)

theme_bw <- 
  beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar(position = "dodge") +
  theme_bw()

theme_classic <- 
  beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar(position = "dodge") +
  theme_classic()

theme_dark <- 
  beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar(position = "dodge") +
  theme_dark()

theme_minimal <- 
  beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar(position = "dodge") +
  theme_minimal()

(theme_bw + theme_classic) / (theme_dark + theme_minimal)
```

We can install themes from other packages, including `ggthemes` [@ggthemes], and `hrbrthemes` [@hrbrthemes]. And we can also build our own.

The default labels used by `ggplot2` are the name of the relevant variable, and it is often useful to add more detail. We could also add a title and caption. A caption can be useful to add information about the source of the dataset. A title can be useful when the graph is going to be considered outside of the context of our paper. But in the case of a graph that will be included in a paper, the need to cross-reference all graphs that are in a paper means that including a title within `labs()` is unnecessary (@fig-withnicelabels).

```{r}
#| echo: true
#| eval: true
#| fig-cap: "Distribution of age-groups, and vote preference, in the 1997-2001 British Election Panel Study"
#| label: fig-withnicelabels
#| warning: false

beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar() +
  theme_minimal() +
  labs(x = "Age-group of respondent",
       y = "Number of respondents",
       fill = "Voted for",
       title = "Distribution of age-groups, and vote preference, in
       the 1997-2001 British Election Panel Study",
       caption = "Source: 1997-2001 British Election Panel Study.")
```

We use facets to show variation, based on one or more variables [@grammarofgraphics, p. 219]. They are especially useful when we have already used color to highlight variation in some other variable and add an additional dimension. For instance, we may be interested to explain vote, by age and gender (@fig-facets).

```{r}
#| echo: true
#| eval: true
#| fig-cap: "Distribution of age-group by gender, and vote preference, in the 1997-2001 British Election Panel Study"
#| label: fig-facets
#| warning: false

beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar() +
  theme_minimal() +
  labs(x = "Age-group of respondent",
       y = "Number of respondents",
       fill = "Voted for") +
  facet_wrap(vars(gender))
```

We could change `facet_wrap()` to wrap vertically instead of horizontally with `dir = "v"`. Alternatively, we could specify a number of rows, say `nrow = 2`, or a number of columns, say `ncol = 2`. Additionally, by default, both facets will have the same scale. We could enable both facets to have different scales, `scales = "free"`, or just the x-axis `scales = "free_x"`, or just the y-axis `scales = "free_y"` (@fig-facetsfancy). 

```{r}
#| echo: true
#| eval: true
#| fig-cap: "Distribution of age-group by gender, and vote preference, in the 1997-2001 British Election Panel Study"
#| label: fig-facetsfancy
#| warning: false

beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar() +
  theme_minimal() +
  labs(x = "Age-group of respondent",
       y = "Number of respondents",
       fill = "Voted for") +
  facet_wrap(vars(gender),
             dir = "v",
             scales = "free")
```

Finally, we can change the labels of the facets using `labeller()` (@fig-facetsfancylabels). 

```{r}
#| echo: true
#| eval: true
#| fig-cap: "Distribution of age-group by gender, and vote preference, in the 1997-2001 British Election Panel Study"
#| label: fig-facetsfancylabels
#| warning: false

new_labels <- c(female = "Female", male = "Male")

beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar() +
  theme_minimal() +
  labs(x = "Age-group of respondent",
       y = "Number of respondents",
       fill = "Voted for") +
  facet_wrap(vars(gender),
             dir = "v",
             scales = "free",
             labeller = labeller(gender = new_labels))
```

This means that we now have three ways to have multiple graphs: sub-figures, facets, and `patchwork`. They are useful in different circumstances. For instance, we would often want to use sub-figures (covered in [Chapter -@sec-reproducible-workflows]) when we are considering different variables, facets when considering different values of a categorical variable, and `patchwork` when interested in bringing together entirely different graphs.

There are a variety of different ways to change the colors, and many palettes are available including from `RColorBrewer` [@RColorBrewer], which we specify with `scale_fill_brewer()`, and `viridis` [@viridis], which we specify with `scale_fill_viridis()` and is particularly focused on color-blind palettes (@fig-usecolor). 

```{r}
#| echo: true
#| eval: true
#| fig-cap: "Distribution of age-group and vote preference, in the 1997-2001 British Election Panel Study"
#| label: fig-usecolor
#| message: false
#| warning: false

library(viridis)
library(patchwork)

RColorBrewerBrBG <- 
  beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar() +
  theme_minimal() +
  labs(x = "Age-group of respondent",
       y = "Number of respondents",
       fill = "Voted for") + 
  scale_fill_brewer(palette = "Blues")

RColorBrewerSet2 <- 
  beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar() +
  theme_minimal() +
  labs(x = "Age-group of respondent",
       y = "Number of respondents",
       fill = "Voted for") +
  scale_fill_brewer(palette = "Set1")

viridis <- 
  beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar() +
  theme_minimal() +
  labs(x = "Age-group of respondent",
       y = "Number of respondents",
       fill = "Voted for") + 
  scale_fill_viridis(discrete = TRUE)

viridismagma <- 
  beps |> 
  ggplot(mapping = aes(x = age_group, fill = vote)) +
  geom_bar() +
  theme_minimal() +
  labs(x = "Age-group of respondent",
       y = "Number",
       fill = "Voted for") +
   scale_fill_viridis(discrete = TRUE, 
                      option = "magma")

(RColorBrewerBrBG + RColorBrewerSet2) /
  (viridis + viridismagma)
```

Many palettes are available through `RColorBrewer` and `viridis`. We can also build our own. That said, color is something to be considered with a great deal of care and it should only be used to increase the amount of information that is communicated [@elementsofgraphingdata]. Color should not be added to graphs unnecessarily---that is to say, it must play some role. Typically, that role is to distinguish different groups, which implies making the colors dissimilar. Color may also be appropriate if there is some relationship between the color and the variable, for instance if making a graph of the price of mangoes and raspberries, then it could help the reader if the colors were yellow and red, respectively [@franconeri2021science, p. 121].


### Scatterplots

We are often interested in the relationship between two variables. We can use scatterplots to show this. Unless there is a good reason to move to a different option, a scatterplot is almost always the best choice [@weissgerber2015beyond]. Some consider it the most versatile and useful graph option [@historyofdataviz, p. 121] To illustrate scatterplots, we use `WDI` [@WDI] to download some economic indicators from the World Bank, and in particular `WDIsearch()` to find the unique key that need to pass to `WDI()` to facilitate the download.

:::{.callout-note}
## Oh, you think we have good data on that!

Gross Domestic Product (GDP) 'combines in a single figure, and with no double counting, all the output (or production) carried out by all the firms, non-profit institutions, government bodies and households in a given country during a given period, regardless of the type of goods and services produced, provided that the production takes place within the country's economic territory' [@EssentialMacroAggregates, p. 15]. The modern concept was developed by Simon Kuznets and is widely used and reported. There is a certain comfort in having a definitive and concrete single number to describe something as complicated as the entire economic activity of a country. And it is crucial that we have such summary statistics. But as with any summary statistic, its strength is also its weakness. A single number necessarily loses information about constituent components, and these distributional differences are critical. It highlights short term economic progress over longer term improvements. And 'the quantitative definiteness of the estimates makes it easy to forget their dependence upon imperfect data and the consequently wide margins of possible error to which both totals and components are liable' [@NationalIncomeAndItsComposition, p. xxvi]. Reliance on any one summary measure of economic performance presents a misguided picture not only of a country's economy, but also of its peoples.
:::

```{r}
#| echo: true
#| eval: false

install.packages('WDI')
```

```{r}
#| echo: true
#| eval: true

library(tidyverse)
library(WDI)
WDIsearch("gdp growth")
WDIsearch("inflation")
WDIsearch("population, total")
WDIsearch("Unemployment, total")
```

```{r}
#| echo: true
#| eval: false

world_bank_data <- 
  WDI(indicator = c("FP.CPI.TOTL.ZG",
                    "NY.GDP.MKTP.KD.ZG",
                    "SP.POP.TOTL",
                    "SL.UEM.TOTL.NE.ZS"
                    ),
      country = c("AU", "ET", "IN", "US")
      )
```

```{r}
#| echo: false
#| eval: false

# INTERNAL

write_csv(world_bank_data, "inputs/data/world_bank_data.csv")
```

```{r}
#| eval: true
#| warning: false
#| echo: false

# INTERNAL

world_bank_data <- 
  read_csv(
    "inputs/data/world_bank_data.csv",
    show_col_types = FALSE
    )
```

We may like to change the names to be more meaningful, and only keep the columns that we need.

```{r}
#| echo: true
#| eval: true

world_bank_data <- 
  world_bank_data |> 
  rename(inflation = FP.CPI.TOTL.ZG,
         gdp_growth = NY.GDP.MKTP.KD.ZG,
         population = SP.POP.TOTL,
         unemployment_rate = SL.UEM.TOTL.NE.ZS
         ) |> 
  select(-iso2c)

head(world_bank_data)
```

To get started we can use `geom_point()` to make a scatterplot showing GDP growth and inflation, by country (@fig-scattorplot).

```{r}
#| fig-cap: "Relationship between inflation and GDP growth for Australia, Ethiopia, India, and the US"
#| label: fig-scattorplot
#| warning: false

world_bank_data |>
  ggplot(mapping = aes(x = gdp_growth, y = inflation, color = country)) +
  geom_point()
```

As with bar charts, we change the theme, and update the labels (@fig-scatterplotnicer), although again, we would normally not need both a caption and a title and would just use one.

```{r}
#| fig-cap: "Relationship between inflation and GDP growth for Australia, Ethiopia, India, and the US"
#| label: fig-scatterplotnicer
#| warning: false

world_bank_data |>
  ggplot(mapping = aes(x = gdp_growth, y = inflation, color = country)) +
  geom_point() +
  theme_minimal() +
  labs(x = "GDP growth",
       y = "Inflation",
       color = "Country",
       title = "Relationship between inflation and GDP growth",
       caption = "Data source: World Bank.")
```

Here we use 'color' instead of 'fill' because we are using dots rather than bars. This also then slightly affects how we change the palette (@fig-scatterplotnicercolor). 

```{r}
#| echo: true
#| eval: true
#| fig-cap: "Relationship between inflation and GDP growth for Australia, Ethiopia, India, and the US"
#| label: fig-scatterplotnicercolor
#| message: false
#| warning: false

library(patchwork)

RColorBrewerBrBG <-
  world_bank_data |>
  ggplot(mapping = aes(x = gdp_growth, y = inflation, color = country)) +
  geom_point() +
  theme_minimal() +
  labs(x = "GDP growth",
       y = "Inflation",
       color = "Country") +
  scale_color_brewer(palette = "Blues")

RColorBrewerSet2 <- 
  world_bank_data |>
  ggplot(mapping = aes(x = gdp_growth, y = inflation, color = country)) +
  geom_point() +
  theme_minimal() +
  labs(x = "GDP growth",
       y = "Inflation",
       color = "Country") +
  scale_color_brewer(palette = "Set1")

viridis <- 
  world_bank_data |>
  ggplot(mapping = aes(x = gdp_growth, y = inflation, color = country)) +
  geom_point() +
  theme_minimal() +
  labs(x = "GDP growth",
       y = "Inflation",
       color = "Country") +
  scale_colour_viridis_d()

viridismagma <- 
  world_bank_data |>
  ggplot(mapping = aes(x = gdp_growth, y = inflation, color = country)) +
  geom_point() +
  theme_minimal() +
  labs(x = "GDP growth",
       y = "Inflation",
       color = "Country") +
  scale_colour_viridis_d(option = "magma")

over <- RColorBrewerBrBG / 
  RColorBrewerSet2 /
  viridis /
  viridismagma

over + plot_annotation(
  caption = "Data source: World Bank."
)
```

The points of a scatterplot sometimes overlap. We can address this situation in one of two ways (@fig-alphajitter): 

1) Adding a degree of transparency to our dots with 'alpha' (@fig-alphajitter-1). The value for 'alpha' can vary between 0, which is fully transparent, and 1, which is completely opaque. 
2) Adding a small about of noise, which slightly moves the points, using `geom_jitter()` (@fig-alphajitter-2). By default, the movement is uniform in both directions, but we can specify which direction movement occurs with 'width' or 'height'. The decision between these two options turns on the degree to which exact accuracy matters, and the number of points.

```{r}
#| fig-cap: "Relationship between inflation and GDP growth for Australia, Ethiopia, India, and the US"
#| label: fig-alphajitter
#| warning: false
#| fig-subcap: ["Changing the alpha setting","Using jitter"]
#| layout-ncol: 2

world_bank_data |>
  ggplot(mapping = aes(x = gdp_growth, y = inflation, color = country)) +
  geom_point(alpha = 0.5) +
  theme_minimal() +
  labs(x = "GDP growth",
       y = "Inflation",
       color = "Country",
       caption = "Data source: World Bank.")

world_bank_data |>
  ggplot(mapping = aes(x = gdp_growth, y = inflation, color = country)) +
  geom_jitter() +
  theme_minimal() +
  labs(x = "GDP growth",
       y = "Inflation",
       color = "Country",
       caption = "Data source: World Bank.")
```

A common use case for a scatterplot is to illustrate a relationship between two variables. It can be useful to add a line of best fit using `geom_smooth()` (@fig-scattorplottwo). By default, `geom_smooth()` will use LOESS smoothing for datasets with less than 1,000 observations, but we can specify the relationship using 'method', change the color with 'color' and add or remove standard errors with 'se'. Using `geom_smooth()` adds a layer to the graph, and so it inherits aesthetics from `ggplot()`. For instance, that is why we initially have one line for each country in @fig-scattorplottwo. We could overwrite that by specifying a particular color, which we do in the third graph of @fig-scattorplottwo.

```{r}
#| fig-cap: "Relationship between inflation and GDP growth for Australia, Ethiopia, India, and the US"
#| label: fig-scattorplottwo
#| message: false
#| warning: false

defaults <- 
  world_bank_data |>
  ggplot(mapping = aes(x = gdp_growth, y = inflation, color = country)) +
  geom_jitter() +
  geom_smooth() +
  theme_minimal() +
  labs(x = "GDP growth",
       y = "Inflation",
       color = "Country")

straightline <- 
  world_bank_data |>
  ggplot(mapping = aes(x = gdp_growth, y = inflation, color = country)) +
  geom_jitter() +
  geom_smooth(method = lm, se = FALSE) +
  theme_minimal() +
  labs(x = "GDP growth",
       y = "Inflation",
       color = "Country")

onestraightline <- 
  world_bank_data |>
  ggplot(mapping = aes(x = gdp_growth, y = inflation, color = country)) +
  geom_jitter() +
  geom_smooth(method = lm, color = "black", se = FALSE) +
  theme_minimal() +
  labs(x = "GDP growth",
       y = "Inflation",
       color = "Country")

patch <- defaults / 
  straightline /
  onestraightline

patch + plot_annotation(
  caption = "Data source: World Bank."
)
```


### Line plots

We can use a line plot when we have variables that should be joined together, for instance, an economic time series. We will continue with the dataset from the World Bank and focus on US GDP growth using `geom_line()` (@fig-lineplot). 

```{r}
#| fig-cap: "US GDP growth (1961-2020)"
#| label: fig-lineplot
#| warning: false

world_bank_data |>
  filter(country == "United States") |>
  ggplot(mapping = aes(x = year, y = gdp_growth)) +
  geom_line()
```

As before, we can adjust the theme, say with `theme_minimal()` and labels with `labs()` (@fig-lineplottwo).

```{r}
#| fig-cap: "US GDP growth (1961-2020)"
#| label: fig-lineplottwo
#| warning: false

world_bank_data |>
  filter(country == "United States") |>
  ggplot(mapping = aes(x = year, y = gdp_growth)) +
  geom_line() +
  theme_minimal() +
  labs(x = "Year",
       y = "GDP growth",
       caption = "Data source: World Bank.")
```

We can use a slight variant of `geom_line()`, `geom_step()` to focus attention on the change from year to year (@fig-stepplot).

```{r}
#| fig-cap: "US GDP growth (1961-2020)"
#| label: fig-stepplot
#| warning: false

world_bank_data |>
  filter(country == "United States") |>
  ggplot(mapping = aes(x = year, y = gdp_growth)) +
  geom_step() +
  theme_minimal() +
  labs(x = "Year",
       y = "GDP growth",
       caption = "Data source: World Bank.")
```

The Phillips curve is the name given to plot of the relationship between unemployment and inflation over time. An inverse relationship is sometimes found in the data, for instance in the UK between 1861 and 1957 [@phillips1958relation]. We have a variety of ways to investigate this including:

1) Adding a second line to our graph. For instance, we could add inflation (@fig-notphillips). This may require us to use `pivot_longer()` to ensure that the data are in tidy format.
2) Using `geom_path()` to links values in the order they appear in the dataset. In @fig-phillipsmyboy we show a Phillips curve for the US between 1960 and 2020. @fig-phillipsmyboy does not appear to show any clear relationship between unemployment and inflation.

```{r}
#| fig-cap: "Unemployment and inflation for the US (1960-2020)"
#| label: fig-notphillips
#| warning: false

world_bank_data |>
  filter(country == "United States") |>
  select(-population, -gdp_growth) |>
  pivot_longer(cols = c("inflation", "unemployment_rate"),
               names_to = "series",
               values_to = "value"
               ) |>
  ggplot(mapping = aes(x = year, y = value, color = series)) +
  geom_line() +
  theme_minimal() +
  labs(x = "Year",
       y = "Value",
       color = "Economic indicator",
       caption = "Data source: World Bank.") +
  scale_color_brewer(palette = "Set1", labels = c("Inflation", "Unemployment")) +
  theme(legend.position = "bottom")
```


```{r}
#| fig-cap: "Phillips curve for the US (1960-2020)"
#| label: fig-phillipsmyboy
#| warning: false

world_bank_data |>
  filter(country == "United States") |>
  ggplot(mapping = aes(x = unemployment_rate, y = inflation)) +
  geom_path() +
  theme_minimal() +
  labs(x = "Unemployment rate",
       y = "Inflation",
       caption = "Data source: World Bank.")
```

<!-- One of the issues with @fig-phillipsmyboy) is that we do not have a good sense of the passage of time. Here, color could be useful (@fig-phillipsmyboycolor). -->

<!-- 
#| fig-cap: "Phillips curve for the US (1960-2020)"} 
#| label: phillipsmyboycolor
<!-- world_bank_data |> -->
<!--   filter(country == "United States") |> -->
<!--   ggplot(mapping = aes(x = unemployment_rate,  -->
<!--                        y = inflation, -->
<!--                        colour = year), -->
<!--          show.legend = F) + -->
<!--   geom_path() + -->
<!--   theme_minimal() + -->
<!--   labs(x = "Unemployment rate", -->
<!--        y = "Inflation", -->
<!--        caption = "Data source: World Bank.") -->
<!-- ``` -->


### Histograms

A histogram is useful to show the shape of a continuous variable. They construct counts of the number of observations in different subsets of the support, called 'bins'. In @fig-hisogramone we examine the distribution of GDP in Ethiopia.

```{r}
#| fig-cap: "Distribution of GDP growth in Ethiopia (1960-2020)"
#| label: fig-hisogramone
#| message: false
#| warning: false

world_bank_data |> 
  filter(country == "Ethiopia") |> 
  ggplot(mapping = aes(x = gdp_growth)) +
  geom_histogram()
```

And again we can add a theme and labels (@fig-hisogramtwo).

```{r}
#| fig-cap: "Distribution of GDP growth in Ethiopia (1960-2020)"
#| label: fig-hisogramtwo
#| warning: false

world_bank_data |> 
  filter(country == "Ethiopia") |> 
  ggplot(mapping = aes(x = gdp_growth)) +
  geom_histogram() +
  theme_minimal() +
  labs(x = "GDP growth",
       y = "Number of occurrences",
       caption = "Data source: World Bank.")
```

The key component determining the shape of a histogram is the number of bins. This can be specified in one of two ways (@fig-hisogrambins): 

1) specifying the number of 'bins' to include, or 
2) specifying how wide they should be, 'binwidth'.

```{r}
#| fig-cap: "Distribution of GDP growth in Ethiopia (1960-2020)"
#| label: fig-hisogrambins
#| message: false
#| warning: false

twobins <- 
  world_bank_data |> 
  filter(country == "Ethiopia") |> 
  ggplot(mapping = aes(x = gdp_growth)) +
  geom_histogram(bins = 2) +
  theme_minimal() +
  labs(x = "GDP",
       y = "Number of occurrences")

fivebins <- 
  world_bank_data |> 
  filter(country == "Ethiopia") |> 
  ggplot(mapping = aes(x = gdp_growth)) +
  geom_histogram(bins = 5) +
  theme_minimal() +
  labs(x = "GDP",
       y = "Number of occurrences")

twentybins <- 
  world_bank_data |> 
  filter(country == "Ethiopia") |> 
  ggplot(mapping = aes(x = gdp_growth)) +
  geom_histogram(bins = 20) +
  theme_minimal() +
  labs(x = "GDP",
       y = "Number of occurrences")

halfbinwidth <- 
  world_bank_data |> 
  filter(country == "Ethiopia") |> 
  ggplot(mapping = aes(x = gdp_growth)) +
  geom_histogram(binwidth = 0.5) +
  theme_minimal() +
  labs(x = "GDP",
       y = "Number of occurrences")

twobinwidth <- 
  world_bank_data |> 
  filter(country == "Ethiopia") |> 
  ggplot(mapping = aes(x = gdp_growth)) +
  geom_histogram(binwidth = 2) +
  theme_minimal() +
  labs(x = "GDP",
       y = "Number of occurrences")

fivebinwidth <- 
  world_bank_data |> 
  filter(country == "Ethiopia") |> 
  ggplot(mapping = aes(x = gdp_growth)) +
  geom_histogram(binwidth = 5) +
  theme_minimal() +
  labs(x = "GDP",
       y = "Number of occurrences")

patchwork <- (twobins + fivebins + twentybins) / 
  (halfbinwidth + twobinwidth + fivebinwidth)

patchwork + plot_annotation(
  caption = "Data source: World Bank."
)
```

Histograms smooth data, and the number of bins affects how much smoothing occurs. When there are only two bins then the data are very smooth, but we lose a great deal of accuracy. More specifically, 'the histogram estimator is a piecewise constant function where the height of the function is proportional to the number of observations in each bin' [@wasserman, p. 303]. Too few bins result in a biased estimator, while too many bins results in an estimator with high variance. Our decision as to the number of bins, or their width, is concerned with trying to balance bias and variance. This will depend on a variety of concerns including the subject matter and the goal [@elementsofgraphingdata, p. 135].

Finally, while we can use 'fill' to distinguish between different types of observations, it can get quite messy. It is usually better to give away showing the distribution with columns and instead trace the outline of the distribution, using `geom_freqpoly()` (@fig-freq) or to build it up using dots with `geom_dotplot()` (@fig-dotplot) .

```{r}
#| fig-cap: "Distribution of GDP growth in four countries (1960-2020)"
#| label: fig-freq
#| message: false
#| warning: false

world_bank_data |> 
  ggplot(mapping = aes(x = gdp_growth, color = country)) +
  geom_freqpoly() +
  theme_minimal() +
  labs(x = "GDP",
       y = "Number of occurrences",
       color = "Country",
       caption = "Data source: World Bank.") +
  scale_color_brewer(palette = "Set1") 
```


```{r}
#| fig-cap: "Distribution of GDP growth in four countries (1960-2020)"
#| label: fig-dotplot
#| message: false
#| warning: false

world_bank_data |> 
  ggplot(mapping = aes(x = gdp_growth, group = country, fill = country)) +
  geom_dotplot(method = 'histodot', alpha = 0.4) +
  theme_minimal() +
  labs(x = "GDP",
       y = "Number of occurrences",
       fill = "Country",
       caption = "Data source: World Bank.") +
  scale_color_brewer(palette = "Set1") 
```


### Boxplots

Boxplots are almost never an appropriate choice because they hide the distribution of data, rather than show it. Unless we need to compare the summary statistics of many variables at once, then they should almost never be used (an example of this exception is @Bethlehem2022). This is because the same boxplot can apply to very different distributions. To see this, consider some simulated data from the beta distribution of two types. One type of data contains draws from two beta distributions: one that is right skewed and another that is left skewed. The other type of data contains draws from a beta distribution with no skew.

```{r}
set.seed(853)

both_left_and_right_skew <- 
  c(
    rbeta(500, 5, 2),
    rbeta(500, 2, 5)
    )

no_skew <- 
  rbeta(1000, 1, 1)

beta_distributions <- 
  tibble(
    observation = c(both_left_and_right_skew, no_skew),
    source = c(rep("Left and right skew", 1000),
               rep("No skew", 1000)
               )
  )
```

We can first compare the boxplots of the two series (@fig-boxplotfirst).

```{r}
#| fig-cap: "Data drawn from beta distributions with different parameters"
#| label: fig-boxplotfirst
#| message: false
#| warning: false

beta_distributions |> 
  ggplot(aes(x = source, y = observation)) +
  geom_boxplot() +
  theme_classic()
```

But if we plot the actual data then we can see how different they are (@fig-freqpolyofdistributions).

```{r}
#| fig-cap: "Data drawn from beta distributions with different parameters"
#| label: fig-freqpolyofdistributions
#| message: false
#| warning: false

beta_distributions |> 
  ggplot(aes(x = observation, color = source)) +
  geom_freqpoly(binwidth = 0.05) +
  theme_classic()
```

One way forward, if a boxplot must be included, is to include the actual data as a layer on top of the boxplot. For instance, in @fig-bloxplotandoverlay we show the distribution of inflation across the four countries.

```{r}
#| fig-cap: "Distribution of unemployment data for four countries (1960-2020)"
#| label: fig-bloxplotandoverlay
#| message: false
#| warning: false

world_bank_data |> 
  ggplot(mapping = aes(x = country, y = inflation)) +
  geom_boxplot() +
  geom_jitter(alpha = 0.3, width = 0.15, height = 0) +
  theme_minimal() +
  labs(x = "Country",
       y = "Inflation",
       caption = "Data source: World Bank.") +
  scale_color_brewer(palette = "Set1") 
```





## Tables

Tables are critical for telling a compelling story. Tables can communicate less information than a graph, but they do so at a high fidelity. For instance, @andersen2021presenting say that tables are especially useful to highlight a few specific values. We primarily use tables in three ways:

1. To show some of our actual dataset, for which we use `kable()` from `knitr` [@citeknitr], alongside `kableExtra` [@citekableextra].
2. To communicate summary statistics, for which we use `modelsummary` [@citemodelsummary].
3. To display regression results, for which we also use `modelsummary` [@citemodelsummary].

It is worth pointing out that even for many of these applications, a graph may actually be a better choice, albeit one that requires more effort on the part of the author [@Kastellec2007].


### Showing part of a dataset

We illustrate showing part of a dataset using `kable()` from `knitr` and drawing on `kableExtra` for enhancement. We again use the World Bank dataset that we downloaded earlier.

```{r}
library(knitr)
head(world_bank_data)
```

To begin, we can display the first ten rows with the default `kable()` settings.

```{r}
world_bank_data |> 
  slice(1:10) |> 
  kable() 
```


In order to be able to cross-reference it in text, we need to add a caption to the R chunk. We can also make the column names more information with 'col.names' and specify the number of digits to be displayed (@tbl-gdpfirst).

```{r}
#| label: tbl-gdpfirst
#| message: false
#| tbl-cap: "First ten rows of a dataset of economic indicators for Australia, Ethiopia, India, and the US"

world_bank_data |> 
  slice(1:10) |> 
  kable(    
    col.names = c("Country", "Year", "Inflation", "GDP growth", "Population", "Unemployment rate"),
    digits = 1
  )
```

When producing PDFs, the 'booktabs' option makes a host of small changes to the default display and results in tables that look better (@tbl-gdpbookdtabs). When using 'booktabs' we additionally should specify 'linesep' otherwise `kable()` adds a small space every five lines. (None of this will show up for html output.)

```{r}
#| label: tbl-gdpbookdtabs
#| message: false
#| tbl-cap: "First ten rows of a dataset of economic indicators for Australia, Ethiopia, India, and the US"

world_bank_data |> 
  slice(1:10) |> 
  kable(
    col.names = c("Country", "Year", "Inflation", "GDP growth", "Population", "Unemployment rate"),
    digits = 1,
    booktabs = TRUE, 
    linesep = ""
  )
```

```{r}
#| label: tbl-gdpbookdtabsnolinesep
#| message: false
#| tbl-cap: "First ten rows of a dataset of economic indicators for Australia, Ethiopia, India, and the US"

world_bank_data |> 
  slice(1:10) |> 
  kable(
    col.names = c("Country", "Year", "Inflation", "GDP growth", "Population", "Unemployment rate"),
    digits = 1,
    booktabs = TRUE
  )
```


We specify the alignment of the columns using a character vector of 'l' (left), 'c' (centre), and 'r' (right) (@tbl-gdpalign). Additionally, we can change the formatting. For instance, we could specify groupings for numbers that are at least one thousand using 'format.args = list(big.mark = ",")'.

```{r}
#| label: tbl-gdpalign
#| message: false
#| tbl-cap: "First ten rows of a dataset of economic indicators for Australia, Ethiopia, India, and the US"

world_bank_data |> 
  slice(1:10) |> 
  mutate(year = as.factor(year)) |>
  kable(
    col.names = c("Country", "Year", "Inflation", "GDP growth", 
                  "Population", "Unemployment rate"),
    digits = 1,
    booktabs = TRUE, 
    linesep = "",
    align = c('l', 'l', 'c', 'c', 'r', 'r'),
    format.args = list(big.mark = ",")
  )
```

We can use `kableExtra` [@citekableextra] to add extra functionality to `kable`. For instance, we could add a row that groups some of the columns (@tbl-gdpalign).

```{r}
#| label: tbl-gdpkableextra
#| message: false
#| tbl-cap: "First ten rows of a dataset of economic indicators for Australia, Ethiopia, India, and the US"

library(kableExtra)

world_bank_data |> 
  slice(1:10) |> 
  kable(
    col.names = c("Country", "Year", "Inflation", "GDP growth", 
                  "Population", "Unemployment rate"),
    digits = 1,
    booktabs = TRUE, 
    linesep = "",
    align = c('l', 'l', 'c', 'c', 'r', 'r'),
  ) |> 
  add_header_above(c(" " = 2, "Economic indicators" = 4))
```

Another especially nice way to build tables is to use `gt` [@citegt].

```{r}
#| label: gtfirst

library(gt)

world_bank_data |> 
  slice(1:10) |> 
  gt() 
```

Again, we can add a caption and more informative column labels (@tbl-dsdfweasdf).

```{r}
#| label: tbl-dsdfweasdf
#| tbl-cap: "First ten rows of a dataset of economic indicators for Australia, Ethiopia, India, and the US"

world_bank_data |>
  slice(1:10) |>
  gt() |>
  cols_label(
      country = "Country",
      year = "Year",
      inflation = "Inflation",
      gdp_growth = "GDP growth",
      population = "Population",
      unemployment_rate = "Unemployment rate"
    )
```




### Communicating summary statistics

We can use `datasummary()` from `modelsummary` to create tables of summary statistics from our dataset. 

```{r}
#| message: false
#| warning: false

library(modelsummary)

world_bank_data |> 
  datasummary_skim()
```

By default, `datasummary()` summarizes the 'numeric' variables, but we can ask for the 'categorical' variables (@tbl-testdatasummary). Additionally we can add cross-references in the same way as `kable()`, that is, include a title and then cross-reference the name of the R chunk.

```{r}
#| label: tbl-testdatasummary
#| tbl-cap: "Summary of categorical economic indicator variables for four countries"

world_bank_data |> 
  datasummary_skim(type = "categorical")
```

We can create a table that shows the correlation between variables using `datasummary_correlation()` (@tbl-correlationtable).

```{r}
#| label: tbl-correlationtable
#| tbl-cap: "Correlation between the economic indicator variables for four countries (Australia, Ethiopia, India, and the US)"

world_bank_data |> 
  datasummary_correlation()
```

We typically need a table of descriptive statistics that we could add to our paper (@tbl-descriptivestats). This contrasts with @tbl-testdatasummary) which would likely not be included in a paper. We can add a note about the source of the data using 'notes'.

```{r}
#| label: tbl-descriptivestats
#| warning: false
#| tbl-cap: "Descriptive statistics for the inflation and GDP dataset"

datasummary_balance(formula = ~country,
                    data = world_bank_data,
                    notes = "Data source: World Bank.")
```





### Display regression results

Finally, one common reason for needing a table is to report regression results. We will do this using `modelsummary()` from `modelsummary` [@citemodelsummary].

```{r}
first_model <- lm(formula = gdp_growth ~ inflation, 
                  data = world_bank_data)

modelsummary(first_model)
```

We can put a variety of different of different models together (@tbl-twomodels).

```{r}
#| label: tbl-twomodels
#| tbl-cap: "Explaining GDP as a function of inflation"

second_model <- lm(formula = gdp_growth ~ inflation + country, 
                  data = world_bank_data)

third_model <- lm(formula = gdp_growth ~ inflation + country + population, 
                  data = world_bank_data)

modelsummary(list(first_model, second_model, third_model))
```


We can adjust the number of significant digits (@tbl-twomodelstwo).

```{r}
#| label: tbl-twomodelstwo
#| tbl-cap: "Two models of GDP as a function of inflation"

modelsummary(list(first_model, second_model, third_model),
             fmt = 1)
```









## Maps

In many ways maps can be thought of as another type of graph, where the x-axis is latitude, the y-axis is longitude, and there is some outline or a background image. We have seen this type of set-up  are used to this type of set-up, for instance, in the `ggplot2` setting, this is quite familiar. 

```{r}
#| eval: false

ggplot() +
  geom_polygon( # First draw an outline
    data = some_data, 
    aes(x = latitude, 
        y = longitude,
        group = group
        )) +
  geom_point( # Then add points of interest
    data = some_other_data, 
    aes(x = latitude, 
        y = longitude)
    )
```

And while there are some small complications, for the most part it is as straight-forward as that. The first step is to get some data. There is some geographic data built into `ggplot2`, and there is additional information in the 'world.cities' dataset from `maps`. 

```{r}
#| message: false
#| warning: false

library(maps)

france <- map_data(map = "france")

head(france)

french_cities <- 
  world.cities |>
  filter(country.etc == "France")

head(french_cities)
```

With that information in hand, we can then create a map of France that shows the larger cities.  We use `geom_polygon()` from `ggplot2` to draw shapes by connecting points within groups. And `coord_map()` adjusts for the fact that we are making a 2D map to represent a world that is 3D.

```{r}
#| message: false
#| warning: false

ggplot() +
  geom_polygon(data = france,
               aes(x = long,
                   y = lat,
                   group = group),
               fill = "white", 
               colour = "grey") +
  coord_map() +
  geom_point(aes(x = french_cities$long, 
                 y = french_cities$lat),
             alpha = 0.3,
             color = "black") +
  theme_classic() +
  labs(x = "Longitude",
       y = "Latitude")
```


As is often the case with R, there are many different ways to get started creating static maps. We have seen how they can be built using only `ggplot2`, but `ggmap` brings additional functionality [@KahleWickham2013].

There are two essential components to a map: 

1) a border or background image (sometimes called a tile); and 
2) something of interest within that border, or on top of that tile. 

In `ggmap`, we use an open-source option for our tile, Stamen Maps. And we use plot points based on latitude and longitude.


### Australian polling places

In Australia people go to specific locations, called booths, to vote. These booths have latitudes and longitudes and so we can plot these. One reason we may like to do this is to notice patterns over geographies.

To get started we need to get a tile. We are going to use `ggmap` to get a tile from Stamen Maps, which builds on [OpenStreetMap](openstreetmap.org). The main argument to this function is to specify a bounding box. This requires two latitudes - one for the top of the box and one for the bottom of the box - and two longitudes - one for the left of the box and one for the right of the box. It can be useful to use Google Maps, or an alternative, to find the values of these that you need. The bounding box provides the coordinates of the edges that you are interested in. In this case we have provided it with coordinates such that it will be centered around Canberra, Australia, which is a small city that was created for the purposes of being the capital.

```{r}
#| warning: false
#| message: false

library(ggmap)

bbox <- c(left = 148.95, bottom = -35.5, right = 149.3, top = -35.1)
```

Once you have defined the bounding box, then the function `get_stamenmap()` will get the tiles in that area. The number of tiles that it needs to get depends on the zoom, and the type of tiles that it gets depends on the maptype. We have used a black-and-white type of map but the helpfile specifies others. At this point we can the map to maps to `ggmap()` and it will plot the tile. It will be actively downloading these tiles, and so it needs an internet connection.

```{r}
#| warning: false
#| message: false

canberra_stamen_map <- get_stamenmap(bbox, zoom = 11, maptype = "toner-lite")

ggmap(canberra_stamen_map)
```

Once we have a map then we can use `ggmap()` to plot it. Now we want to get some data that we plot on top of our tiles. We will just plot the location of the polling places, based on which 'division' it is. This is available [here](https://results.aec.gov.au/20499/Website/Downloads/HouseTppByPollingPlaceDownload-20499.csv). The Australian Electoral Commission (AEC) is the official government agency that is responsible for elections in Australia.

```{r}
#| warning: false
#| message: false

# Read in the booths data for each year
booths <-
  readr::read_csv(
    "https://results.aec.gov.au/24310/Website/Downloads/GeneralPollingPlacesDownload-24310.csv",
    skip = 1,
    guess_max = 10000
  )

head(booths)
```

This dataset is for the whole of Australia, but as we are just going to plot the area around Canberra we filter to that and only to booths that are geographic (the AEC has various options for people who are in hospital, or not able to get to a booth, etc, and these are still 'booths' in this dataset).

```{r}
#| warning: false
#| message: false

# Reduce the booths data to only rows with that have latitude and longitude
booths_reduced <-
  booths |>
  filter(State == "ACT") |> 
  select(PollingPlaceID, DivisionNm, Latitude, Longitude) |> 
  filter(!is.na(Longitude)) |> # Remove rows that do not have a geography
  filter(Longitude < 165) # Remove Norfolk Island
```

Now we can use `ggmap` in the same way as before to plot our underlying tiles, and then build on that using `geom_point()` to add our points of interest.

```{r}
#| warning: false
#| message: false

ggmap(canberra_stamen_map,
      extent = "normal",
      maprange = FALSE) +
  geom_point(data = booths_reduced,
             aes(x = Longitude,
                 y = Latitude,
                 colour = DivisionNm),) +
  scale_color_brewer(name = "2019 Division", palette = "Set1") +
  coord_map(
    projection = "mercator",
    xlim = c(attr(map, "bb")$ll.lon, attr(map, "bb")$ur.lon),
    ylim = c(attr(map, "bb")$ll.lat, attr(map, "bb")$ur.lat)
  ) +
  labs(x = "Longitude",
       y = "Latitude") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())
```

We may like to save the map so that we do not have to draw it every time, and we can do that in the same way as any other graph, using `ggsave()`.

```{r}
#| eval: false

ggsave("map.pdf", width = 20, height = 10, units = "cm")
```

Finally, the reason that we used Stamen Maps and OpenStreetMap is because it is open source, but we could have also used Google Maps. This requires you to first register a credit card with Google, and specify a key, but with low usage should be free. Using Google Maps, `get_googlemap()`, brings some advantages over `get_stamenmap()`, for instance it will attempt to find a placename, rather than needing to specify a bounding box.



### US troop deployment

Let us see another example of a static map, this time using data on US military deployments from `troopdata` [@troopdata]. We can access data about US overseas military bases back to the start of the Cold War using `get_basedata()`.

```{r}
#| eval: false

install.packages("troopdata")
```

```{r}
library(troopdata)

bases <- get_basedata()

head(bases)
```

We will look at the locations of US military bases in: Germany, Japan, and Australia. The `troopdata` dataset already has latitude and longitude of the base. We will use that as our item of interest. The first step is to define a bounding box for each of country.

```{r}
#| message: false
#| warning: false

library(ggmap)

# Based on: https://data.humdata.org/dataset/bounding-boxes-for-countries
bbox_germany <-
  c(
    left = 5.867,
    bottom = 45.967,
    right = 15.033,
    top = 55.133
  )

bbox_japan <-
  c(
    left = 127,
    bottom = 30,
    right = 146,
    top = 45
  )

bbox_australia <-
  c(
    left = 112.467,
    bottom = -45,
    right = 155,
    top = -9.133
  )
```

Then we need to get the tiles using `get_stamenmap()` from `ggmap`. 

```{r}
#| message: false
#| warning: false

germany_stamen_map <-
  get_stamenmap(bbox_germany, zoom = 6, maptype = "toner-lite")

japan_stamen_map <-
  get_stamenmap(bbox_japan, zoom = 6, maptype = "toner-lite")

australia_stamen_map <-
  get_stamenmap(bbox_australia, zoom = 5, maptype = "toner-lite")
```

And finally, we can bring it all together with maps show US military bases in Germany (@fig-mapbasesingermany), Japan (@fig-mapbasesinjapan), and Australia (@fig-mapbasesinaustralia).

```{r}
#| fig-cap: "Map of US military bases in Germany"
#| label: fig-mapbasesingermany
#| message: false
#| warning: false

ggmap(germany_stamen_map) +
  geom_point(data = bases,
             aes(x = lon,
                 y = lat)
             ) +
  labs(x = "Longitude",
       y = "Latitude") +
  theme_minimal() 
```

```{r}
#| fig-cap: "Map of US military bases in Japan"
#| label: fig-mapbasesinjapan
#| message: false
#| warning: false

ggmap(japan_stamen_map) +
  geom_point(data = bases,
             aes(x = lon,
                 y = lat)
             ) +
  labs(x = "Longitude",
       y = "Latitude") +
  theme_minimal() 
```


```{r}
#| fig-cap: "Map of US military bases in Australia"
#| label: fig-mapbasesinaustralia
#| message: false
#| warning: false

ggmap(australia_stamen_map) +
  geom_point(data = bases,
             aes(x = lon,
                 y = lat)
             ) +
  labs(x = "Longitude",
       y = "Latitude") +
  theme_minimal() 
```





### Geocoding

To this point we assumed that we already had geocoded data, which means that we have a latitude and longitude. If we only have place names, such as 'Canberra, Australia', 'Ottawa, Canada', 'Accra, Ghana', 'Quito, Ecuador' are just names, they do not actually inherently have a location. To plot them we need to get a latitude and longitude for them. The process of going from names to coordinates is called geocoding.

There are a range of options to geocode data in R, but `tidygeocoder` is especially useful [@citetidygeocoder]. We first need a dataframe of locations. 

```{r}
place_names <-
  tibble(
    city = c('Canberra', 'Ottawa', 'Accra', 'Quito'),
    country = c('Australia', 'Canada', 'Ghana', 'Ecuador')
  )

place_names
```

```{r}
#| message: false
#| warning: false

library(tidygeocoder)

place_names <-
  geo(city = place_names$city,
      country = place_names$country,
      method = 'osm')

place_names
```

And we can now plot and label these cities (@fig-mynicemap).

```{r}
#| fig-cap: "Map of Accra, Canberra, Ottawa, and Quito after geocoding to obtain their locations"
#| label: fig-mynicemap
#| message: false
#| warning: false

world <- map_data(map = "world")

ggplot() +
  geom_polygon(
    data = world,
    aes(x = long,
        y = lat,
        group = group),
    fill = "white",
    colour = "grey"
  ) +
  coord_map(ylim = c(47,-47)) +
  geom_point(aes(x = place_names$long,
                 y = place_names$lat),
             color = "black") +
  geom_text(aes(
    x = place_names$long,
    y = place_names$lat,
    label = place_names$city
  ),
  nudge_y = -5,) +
  theme_classic() +
  labs(x = "Longitude",
       y = "Latitude")
```



## Exercises and tutorial

### Exercises

1. Assume `tidyverse` and `datasauRus` are installed and loaded. What would be the outcome of the following code?
`datasaurus_dozen |> filter(dataset == "v_lines") |> ggplot(aes(x=x, y=y)) + geom_point()`
    a.  Four vertical lines
    b. Five vertical lines
    c. Three vertical lines
    d. Two vertical lines
2. Assume `tidyverse` and the 'beps' dataset have been installed and loaded. What change should be made to the following to make the bars for the different parties be next to each other rather than on top of each other?
`beps |> ggplot(mapping = aes(x = age, fill = vote)) + geom_bar()`
    a. `position = "side_by_side"`
    b.  `position = "dodge"`
    c. `position = "adjacent"`
    d. `position = "closest"`
3. Which theme should be used to remove the solid lines along the x and y axes?
    a.  `theme_minimal()`
    b. `theme_classic()`
    c. `theme_bw()`
    d. `theme_dark()`
4. Assume `tidyverse` and the 'beps' dataset have been installed and loaded. What should be added to 'labs()' to change the text of the legend?
`beps |> ggplot(mapping = aes(x = age, fill = vote)) + geom_bar() + theme_minimal() + labs(x = "Age of respondent", y = "Number of respondents")`
    a. `color = "Voted for"`
    b. `legend = "Voted for"`
    c. `scale = "Voted for"`
    d.  `fill = "Voted for"`
5. Which palette from `scale_colour_brewer()` is divergent?
    a. 'Accent'
    b.  'RdBu'
    c. 'GnBu'
    d. 'Set1'
6. Which geom should be used to make a scatter plot?
    a. `geom_smooth()`
    b.  `geom_point()`
    c. `geom_bar()`
    d. `geom_dotplot()`
7. Which of these would result in the largest number of bins?
    a. `geom_histogram(binwidth = 5)`
    b.  `geom_histogram(binwidth = 2)`
9. If there is a dataset that contains the heights of 100 birds each from one of three different species. If we are interested in understanding the distribution of these heights, then in a paragraph or two, please explain which type of graph should be used and why?
10. Assume the dataset and columns exist. Would this code work? `data |> ggplot(aes(x = col_one)) |> geom_point()` (pick one)?
    a. Yes
    b.  No
11. Which geom should be used to plot categorical data (pick one)?
    a.  `geom_bar()`
    b. `geom_point()`
    c. `geom_abline()`
    d. `geom_boxplot()`
12. Why are boxplots often inappropriate (pick one)?
    a.  They hide the full distribution of the data.
    b. They are hard to make.
    c. They are ugly.
    d. The mode is clearly displayed.
13. Which of the following, if any, are elements of the layered grammar of graphics [@wickham2010layered] (select all that apply)?
    a. A default dataset and set of mappings from variables to aesthetics.
    b. One or more layers, with each layer having one geometric object, one statistical transformation, one position adjustment, and optionally, one dataset and set of aesthetic mappings.
    c. Colors that enable the reader to understand the main point.
    d. A coordinate system.
    e. The facet specification.
    f. One scale for each aesthetic mapping used.
14. Which function from `modelsummary` is used to create a table of descriptive statistics?
    a. `datasummary_descriptive()`
    b. `datasummary_skim()`
    c. `datasummary_crosstab()`
    d.  `datasummary_balance()`


### Tutorial

Using Quarto, please create a graph using `ggplot2` and a map using `ggmap` and add explanatory text to accompany both. Be sure to include cross-references and captions, etc. This should take one to two pages for each of them. 

Then, for the graph, please reflect on @vanderplas2020testing and add a few paragraphs about the different options that you considered that the graph more effective. (If you have not now got at least two pages about your graph you have likely written too little.)

And finally, for the map, please reflect on the following quote from Heather Krause: 'maps only show people who aren't invisible to the makers' as well as Chapter 3 from @datafeminism2020 and add a few paragraphs related to this. (Again, if you have not now got at least two pages about your map you have likely written too little.)
